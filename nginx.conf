events {
    worker_connections 1024;
}

http {
    resolver 1.1.1.1 ipv6=off;
    lua_package_path  "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/?.lua;/opt/app/src/deps/lua-htmlparser/src/?.lua;/opt/app/src/?.lua;;";

    init_by_lua_block {
        settings = require("settings")
        apod = require("apod")
        cjson = require("cjson")
    }

    error_log /var/logs/openresty/error.log error;
    access_log /var/logs/openresty/access.log;
    server_tokens off;

    server {
        listen 8000;
        client_max_body_size 20k;
        client_body_buffer_size 20k;

        error_page 404 /err_404;

        location /api/v1/ {
            access_log off;
            alias /var/app/www/;
            try_files $uri =404;

            header_filter_by_lua_block {
                ngx.header["X-Credits"] = settings.APOD_PAGE_URL
            }
        }

        location = /api/v1/apod.json {
            # access_log off;
            default_type application/json;

            content_by_lua_block {
                local info = nil
                local res = ngx.location.capture("/apod.json")
                if res.status == 200 then
                    info = cjson.decode(res.body)

                    local year, month, day = info.date:match("^(%d+)%-(%d+)%-(%d+)$")
                    local time = os.time({
                        year = tonumber(year),
                        month = tonumber(month),
                        day = tonumber(day),
                        hour = 0,
                        min = 0,
                        sec = 0
                    })

                    local today = os.date("!*t")
                    today.hour = 0
                    today.min = 0
                    today.sec = 0

                    if time < os.time(today) then
                        info = apod.extract()
                        if not info then
                            ngx.status = 500
                            ngx.say('{"error":"Internal server error."}')
                            ngx.exit(500)
                        end
                    end
                else
                    info = apod.extract()
                    if not info then
                        ngx.status = 500
                        ngx.say('{"error":"Internal server error."}')
                        ngx.exit(500)
                    end
                end
                ngx.say(cjson.encode(info))
            }
        }

        location = /apod.json {
            internal;
            access_log off;
            try_files $uri =404;
            root /var/app/www/;
        }

        location = /err_404 {
            internal;
            default_type text/plain;
            return 404 "Not Found.";
        }

    }
}
